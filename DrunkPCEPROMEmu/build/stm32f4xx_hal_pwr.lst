ARM GAS  /var/folders/3_/bwhprqbs4159v4wd5z0pb2nr0000gn/T//ccMILYZK.s 			page 1


   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 1
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"stm32f4xx_hal_pwr.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.HAL_PWR_DeInit,"ax",%progbits
  20              		.align	1
  21              		.global	HAL_PWR_DeInit
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	HAL_PWR_DeInit:
  27              	.LFB130:
  28              		.file 1 "stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c"
   1:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** /**
   2:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   ******************************************************************************
   3:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @file    stm32f4xx_hal_pwr.c
   4:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @author  MCD Application Team
   5:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @brief   PWR HAL module driver.
   6:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *          This file provides firmware functions to manage the following 
   7:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *          functionalities of the Power Controller (PWR) peripheral:
   8:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *           + Initialization and de-initialization functions
   9:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *           + Peripheral Control functions 
  10:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *         
  11:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   ******************************************************************************
  12:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @attention
  13:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *
  14:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * Copyright (c) 2017 STMicroelectronics.
  15:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * All rights reserved.
  16:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *
  17:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * This software is licensed under terms that can be found in the LICENSE file in
  18:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * the root directory of this software component.
  19:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  20:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   ******************************************************************************
  21:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   */ 
  22:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** 
  23:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** /* Includes ------------------------------------------------------------------*/
  24:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** #include "stm32f4xx_hal.h"
  25:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** 
  26:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** /** @addtogroup STM32F4xx_HAL_Driver
  27:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @{
  28:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   */
  29:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** 
  30:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** /** @defgroup PWR PWR
ARM GAS  /var/folders/3_/bwhprqbs4159v4wd5z0pb2nr0000gn/T//ccMILYZK.s 			page 2


  31:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @brief PWR HAL module driver
  32:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @{
  33:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   */
  34:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** 
  35:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** #ifdef HAL_PWR_MODULE_ENABLED
  36:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** 
  37:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** /* Private typedef -----------------------------------------------------------*/
  38:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** /* Private define ------------------------------------------------------------*/
  39:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** /** @addtogroup PWR_Private_Constants
  40:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @{
  41:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   */
  42:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   
  43:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** /** @defgroup PWR_PVD_Mode_Mask PWR PVD Mode Mask
  44:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @{
  45:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   */     
  46:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** #define PVD_MODE_IT               0x00010000U
  47:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** #define PVD_MODE_EVT              0x00020000U
  48:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** #define PVD_RISING_EDGE           0x00000001U
  49:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** #define PVD_FALLING_EDGE          0x00000002U
  50:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** /**
  51:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @}
  52:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   */
  53:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** 
  54:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** /**
  55:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @}
  56:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   */    
  57:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** /* Private macro -------------------------------------------------------------*/
  58:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** /* Private variables ---------------------------------------------------------*/
  59:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** /* Private function prototypes -----------------------------------------------*/
  60:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** /* Private functions ---------------------------------------------------------*/
  61:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** 
  62:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** /** @defgroup PWR_Exported_Functions PWR Exported Functions
  63:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @{
  64:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   */
  65:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** 
  66:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** /** @defgroup PWR_Exported_Functions_Group1 Initialization and de-initialization functions 
  67:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *  @brief    Initialization and de-initialization functions
  68:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *
  69:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** @verbatim
  70:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****  ===============================================================================
  71:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****               ##### Initialization and de-initialization functions #####
  72:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****  ===============================================================================
  73:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****     [..]
  74:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****       After reset, the backup domain (RTC registers, RTC backup data 
  75:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****       registers and backup SRAM) is protected against possible unwanted 
  76:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****       write accesses. 
  77:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****       To enable access to the RTC Domain and RTC registers, proceed as follows:
  78:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****         (+) Enable the Power Controller (PWR) APB1 interface clock using the
  79:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****             __HAL_RCC_PWR_CLK_ENABLE() macro.
  80:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****         (+) Enable access to RTC domain using the HAL_PWR_EnableBkUpAccess() function.
  81:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****  
  82:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** @endverbatim
  83:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @{
  84:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   */
  85:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** 
  86:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** /**
  87:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @brief Deinitializes the HAL PWR peripheral registers to their default reset values.
ARM GAS  /var/folders/3_/bwhprqbs4159v4wd5z0pb2nr0000gn/T//ccMILYZK.s 			page 3


  88:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @retval None
  89:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   */
  90:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** void HAL_PWR_DeInit(void)
  91:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** {
  29              		.loc 1 91 1 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  92:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   __HAL_RCC_PWR_FORCE_RESET();
  34              		.loc 1 92 3 view .LVU1
  35 0000 044B     		ldr	r3, .L2
  36 0002 1A6A     		ldr	r2, [r3, #32]
  37 0004 42F08052 		orr	r2, r2, #268435456
  38 0008 1A62     		str	r2, [r3, #32]
  93:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   __HAL_RCC_PWR_RELEASE_RESET();
  39              		.loc 1 93 3 view .LVU2
  40 000a 1A6A     		ldr	r2, [r3, #32]
  41 000c 22F08052 		bic	r2, r2, #268435456
  42 0010 1A62     		str	r2, [r3, #32]
  94:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** }
  43              		.loc 1 94 1 is_stmt 0 view .LVU3
  44 0012 7047     		bx	lr
  45              	.L3:
  46              		.align	2
  47              	.L2:
  48 0014 00380240 		.word	1073887232
  49              		.cfi_endproc
  50              	.LFE130:
  52              		.section	.text.HAL_PWR_EnableBkUpAccess,"ax",%progbits
  53              		.align	1
  54              		.global	HAL_PWR_EnableBkUpAccess
  55              		.syntax unified
  56              		.thumb
  57              		.thumb_func
  59              	HAL_PWR_EnableBkUpAccess:
  60              	.LFB131:
  95:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** 
  96:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** /**
  97:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @brief Enables access to the backup domain (RTC registers, RTC 
  98:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *         backup data registers and backup SRAM).
  99:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
 100:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *         Backup Domain Access should be kept enabled.
 101:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @note The following sequence is required to bypass the delay between
 102:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *         DBP bit programming and the effective enabling  of the backup domain.
 103:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *         Please check the Errata Sheet for more details under "Possible delay
 104:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *         in backup domain protection disabling/enabling after programming the
 105:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *         DBP bit" section.
 106:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @retval None
 107:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   */
 108:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** void HAL_PWR_EnableBkUpAccess(void)
 109:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** {
  61              		.loc 1 109 1 is_stmt 1 view -0
  62              		.cfi_startproc
  63              		@ args = 0, pretend = 0, frame = 8
  64              		@ frame_needed = 0, uses_anonymous_args = 0
  65              		@ link register save eliminated.
ARM GAS  /var/folders/3_/bwhprqbs4159v4wd5z0pb2nr0000gn/T//ccMILYZK.s 			page 4


  66 0000 82B0     		sub	sp, sp, #8
  67              	.LCFI0:
  68              		.cfi_def_cfa_offset 8
 110:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   __IO uint32_t dummyread;
  69              		.loc 1 110 3 view .LVU5
 111:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
  70              		.loc 1 111 3 view .LVU6
  71              		.loc 1 111 32 is_stmt 0 view .LVU7
  72 0002 044B     		ldr	r3, .L6
  73 0004 0122     		movs	r2, #1
  74 0006 1A62     		str	r2, [r3, #32]
 112:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   dummyread = PWR->CR;
  75              		.loc 1 112 3 is_stmt 1 view .LVU8
  76              		.loc 1 112 18 is_stmt 0 view .LVU9
  77 0008 034B     		ldr	r3, .L6+4
  78 000a 1B68     		ldr	r3, [r3]
  79              		.loc 1 112 13 view .LVU10
  80 000c 0193     		str	r3, [sp, #4]
 113:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   UNUSED(dummyread);
  81              		.loc 1 113 3 is_stmt 1 view .LVU11
  82 000e 019B     		ldr	r3, [sp, #4]
 114:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** }
  83              		.loc 1 114 1 is_stmt 0 view .LVU12
  84 0010 02B0     		add	sp, sp, #8
  85              	.LCFI1:
  86              		.cfi_def_cfa_offset 0
  87              		@ sp needed
  88 0012 7047     		bx	lr
  89              	.L7:
  90              		.align	2
  91              	.L6:
  92 0014 00000E42 		.word	1108213760
  93 0018 00700040 		.word	1073770496
  94              		.cfi_endproc
  95              	.LFE131:
  97              		.section	.text.HAL_PWR_DisableBkUpAccess,"ax",%progbits
  98              		.align	1
  99              		.global	HAL_PWR_DisableBkUpAccess
 100              		.syntax unified
 101              		.thumb
 102              		.thumb_func
 104              	HAL_PWR_DisableBkUpAccess:
 105              	.LFB132:
 115:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** 
 116:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** /**
 117:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @brief Disables access to the backup domain (RTC registers, RTC 
 118:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *         backup data registers and backup SRAM).
 119:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
 120:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *         Backup Domain Access should be kept enabled.
 121:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @note The following sequence is required to bypass the delay between
 122:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *         DBP bit programming and the effective disabling  of the backup domain.
 123:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *         Please check the Errata Sheet for more details under "Possible delay
 124:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *         in backup domain protection disabling/enabling after programming the
 125:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *         DBP bit" section.
 126:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @retval None
 127:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   */
 128:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** void HAL_PWR_DisableBkUpAccess(void)
ARM GAS  /var/folders/3_/bwhprqbs4159v4wd5z0pb2nr0000gn/T//ccMILYZK.s 			page 5


 129:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** {
 106              		.loc 1 129 1 is_stmt 1 view -0
 107              		.cfi_startproc
 108              		@ args = 0, pretend = 0, frame = 8
 109              		@ frame_needed = 0, uses_anonymous_args = 0
 110              		@ link register save eliminated.
 111 0000 82B0     		sub	sp, sp, #8
 112              	.LCFI2:
 113              		.cfi_def_cfa_offset 8
 130:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   __IO uint32_t dummyread;
 114              		.loc 1 130 3 view .LVU14
 131:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 115              		.loc 1 131 3 view .LVU15
 116              		.loc 1 131 32 is_stmt 0 view .LVU16
 117 0002 044B     		ldr	r3, .L10
 118 0004 0022     		movs	r2, #0
 119 0006 1A62     		str	r2, [r3, #32]
 132:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   dummyread = PWR->CR;
 120              		.loc 1 132 3 is_stmt 1 view .LVU17
 121              		.loc 1 132 18 is_stmt 0 view .LVU18
 122 0008 034B     		ldr	r3, .L10+4
 123 000a 1B68     		ldr	r3, [r3]
 124              		.loc 1 132 13 view .LVU19
 125 000c 0193     		str	r3, [sp, #4]
 133:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   UNUSED(dummyread);
 126              		.loc 1 133 3 is_stmt 1 view .LVU20
 127 000e 019B     		ldr	r3, [sp, #4]
 134:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** }
 128              		.loc 1 134 1 is_stmt 0 view .LVU21
 129 0010 02B0     		add	sp, sp, #8
 130              	.LCFI3:
 131              		.cfi_def_cfa_offset 0
 132              		@ sp needed
 133 0012 7047     		bx	lr
 134              	.L11:
 135              		.align	2
 136              	.L10:
 137 0014 00000E42 		.word	1108213760
 138 0018 00700040 		.word	1073770496
 139              		.cfi_endproc
 140              	.LFE132:
 142              		.section	.text.HAL_PWR_ConfigPVD,"ax",%progbits
 143              		.align	1
 144              		.global	HAL_PWR_ConfigPVD
 145              		.syntax unified
 146              		.thumb
 147              		.thumb_func
 149              	HAL_PWR_ConfigPVD:
 150              	.LVL0:
 151              	.LFB133:
 135:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** 
 136:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** /**
 137:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @}
 138:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   */
 139:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** 
 140:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** /** @defgroup PWR_Exported_Functions_Group2 Peripheral Control functions 
 141:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *  @brief Low Power modes configuration functions 
ARM GAS  /var/folders/3_/bwhprqbs4159v4wd5z0pb2nr0000gn/T//ccMILYZK.s 			page 6


 142:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *
 143:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** @verbatim
 144:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** 
 145:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****  ===============================================================================
 146:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****                  ##### Peripheral Control functions #####
 147:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****  ===============================================================================
 148:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****      
 149:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****     *** PVD configuration ***
 150:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****     =========================
 151:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****     [..]
 152:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****       (+) The PVD is used to monitor the VDD power supply by comparing it to a 
 153:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****           threshold selected by the PVD Level (PLS[2:0] bits in the PWR_CR).
 154:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****       (+) A PVDO flag is available to indicate if VDD/VDDA is higher or lower 
 155:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****           than the PVD threshold. This event is internally connected to the EXTI 
 156:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****           line16 and can generate an interrupt if enabled. This is done through
 157:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****           __HAL_PWR_PVD_EXTI_ENABLE_IT() macro.
 158:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****       (+) The PVD is stopped in Standby mode.
 159:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** 
 160:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****     *** Wake-up pin configuration ***
 161:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****     ================================
 162:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****     [..]
 163:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****       (+) Wake-up pin is used to wake up the system from Standby mode. This pin is 
 164:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****           forced in input pull-down configuration and is active on rising edges.
 165:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****       (+) There is one Wake-up pin: Wake-up Pin 1 on PA.00.
 166:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** 	   (++) For STM32F446xx there are two Wake-Up pins: Pin1 on PA.00 and Pin2 on PC.13
 167:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****            (++) For STM32F410xx/STM32F412xx/STM32F413xx/STM32F423xx  there are three Wake-Up pins: 
 168:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** 
 169:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****     *** Low Power modes configuration ***
 170:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****     =====================================
 171:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****     [..]
 172:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****       The devices feature 3 low-power modes:
 173:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****       (+) Sleep mode: Cortex-M4 core stopped, peripherals kept running.
 174:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****       (+) Stop mode: all clocks are stopped, regulator running, regulator 
 175:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****           in low power mode
 176:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****       (+) Standby mode: 1.2V domain powered off.
 177:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****    
 178:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****    *** Sleep mode ***
 179:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****    ==================
 180:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****     [..]
 181:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****       (+) Entry:
 182:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****         The Sleep mode is entered by using the HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLE
 183:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****               functions with
 184:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****           (++) PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
 185:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****           (++) PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
 186:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****       
 187:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****       -@@- The Regulator parameter is not used for the STM32F4 family 
 188:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****               and is kept as parameter just to maintain compatibility with the 
 189:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****               lower power families (STM32L).
 190:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****       (+) Exit:
 191:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****         Any peripheral interrupt acknowledged by the nested vectored interrupt 
 192:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****               controller (NVIC) can wake up the device from Sleep mode.
 193:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** 
 194:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****    *** Stop mode ***
 195:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****    =================
 196:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****     [..]
 197:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****       In Stop mode, all clocks in the 1.2V domain are stopped, the PLL, the HSI,
 198:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****       and the HSE RC oscillators are disabled. Internal SRAM and register contents 
ARM GAS  /var/folders/3_/bwhprqbs4159v4wd5z0pb2nr0000gn/T//ccMILYZK.s 			page 7


 199:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****       are preserved.
 200:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****       The voltage regulator can be configured either in normal or low-power mode.
 201:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****       To minimize the consumption In Stop mode, FLASH can be powered off before 
 202:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****       entering the Stop mode using the HAL_PWREx_EnableFlashPowerDown() function.
 203:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****       It can be switched on again by software after exiting the Stop mode using
 204:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****       the HAL_PWREx_DisableFlashPowerDown() function. 
 205:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** 
 206:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****       (+) Entry:
 207:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****          The Stop mode is entered using the HAL_PWR_EnterSTOPMode(PWR_MAINREGULATOR_ON) 
 208:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****              function with:
 209:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****           (++) Main regulator ON.
 210:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****           (++) Low Power regulator ON.
 211:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****       (+) Exit:
 212:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****         Any EXTI Line (Internal or External) configured in Interrupt/Event mode.
 213:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** 
 214:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****    *** Standby mode ***
 215:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****    ====================
 216:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****     [..]
 217:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****     (+)
 218:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****       The Standby mode allows to achieve the lowest power consumption. It is based 
 219:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****       on the Cortex-M4 deep sleep mode, with the voltage regulator disabled. 
 220:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****       The 1.2V domain is consequently powered off. The PLL, the HSI oscillator and 
 221:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****       the HSE oscillator are also switched off. SRAM and register contents are lost 
 222:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****       except for the RTC registers, RTC backup registers, backup SRAM and Standby 
 223:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****       circuitry.
 224:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****    
 225:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****       The voltage regulator is OFF.
 226:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****       
 227:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****       (++) Entry:
 228:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****         (+++) The Standby mode is entered using the HAL_PWR_EnterSTANDBYMode() function.
 229:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****       (++) Exit:
 230:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****         (+++) WKUP pin rising edge, RTC alarm (Alarm A and Alarm B), RTC wake-up,
 231:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****              tamper event, time-stamp event, external reset in NRST pin, IWDG reset.
 232:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** 
 233:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****    *** Auto-wake-up (AWU) from low-power mode ***
 234:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****    =============================================
 235:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****     [..]
 236:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****     
 237:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****      (+) The MCU can be woken up from low-power mode by an RTC Alarm event, an RTC 
 238:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****       Wake-up event, a tamper event or a time-stamp event, without depending on 
 239:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****       an external interrupt (Auto-wake-up mode).
 240:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** 
 241:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****       (+) RTC auto-wake-up (AWU) from the Stop and Standby modes
 242:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****        
 243:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****         (++) To wake up from the Stop mode with an RTC alarm event, it is necessary to 
 244:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****               configure the RTC to generate the RTC alarm using the HAL_RTC_SetAlarm_IT() function.
 245:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** 
 246:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****         (++) To wake up from the Stop mode with an RTC Tamper or time stamp event, it 
 247:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****              is necessary to configure the RTC to detect the tamper or time stamp event using the
 248:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****                 HAL_RTCEx_SetTimeStamp_IT() or HAL_RTCEx_SetTamper_IT() functions.
 249:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****                   
 250:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****         (++) To wake up from the Stop mode with an RTC Wake-up event, it is necessary to
 251:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****               configure the RTC to generate the RTC Wake-up event using the HAL_RTCEx_SetWakeUpTime
 252:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** 
 253:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** @endverbatim
 254:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @{
 255:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   */
ARM GAS  /var/folders/3_/bwhprqbs4159v4wd5z0pb2nr0000gn/T//ccMILYZK.s 			page 8


 256:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** 
 257:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** /**
 258:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @brief Configures the voltage threshold detected by the Power Voltage Detector(PVD).
 259:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @param sConfigPVD pointer to an PWR_PVDTypeDef structure that contains the configuration
 260:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *        information for the PVD.
 261:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @note Refer to the electrical characteristics of your device datasheet for
 262:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *         more details about the voltage threshold corresponding to each 
 263:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *         detection level.
 264:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @retval None
 265:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   */
 266:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** void HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
 267:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** {
 152              		.loc 1 267 1 is_stmt 1 view -0
 153              		.cfi_startproc
 154              		@ args = 0, pretend = 0, frame = 0
 155              		@ frame_needed = 0, uses_anonymous_args = 0
 156              		@ link register save eliminated.
 268:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   /* Check the parameters */
 269:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
 157              		.loc 1 269 3 view .LVU23
 270:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));
 158              		.loc 1 270 3 view .LVU24
 271:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   
 272:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   /* Set PLS[7:5] bits according to PVDLevel value */
 273:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   MODIFY_REG(PWR->CR, PWR_CR_PLS, sConfigPVD->PVDLevel);
 159              		.loc 1 273 3 view .LVU25
 160 0000 1E4A     		ldr	r2, .L17
 161 0002 1368     		ldr	r3, [r2]
 162 0004 23F0E003 		bic	r3, r3, #224
 163 0008 0168     		ldr	r1, [r0]
 164 000a 0B43     		orrs	r3, r3, r1
 165 000c 1360     		str	r3, [r2]
 274:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   
 275:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   /* Clear any previous config. Keep it clear if no event or IT mode is selected */
 276:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 166              		.loc 1 276 3 view .LVU26
 167 000e 1C4B     		ldr	r3, .L17+4
 168 0010 5A68     		ldr	r2, [r3, #4]
 169 0012 22F48032 		bic	r2, r2, #65536
 170 0016 5A60     		str	r2, [r3, #4]
 277:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   __HAL_PWR_PVD_EXTI_DISABLE_IT();
 171              		.loc 1 277 3 view .LVU27
 172 0018 1A68     		ldr	r2, [r3]
 173 001a 22F48032 		bic	r2, r2, #65536
 174 001e 1A60     		str	r2, [r3]
 278:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 175              		.loc 1 278 3 view .LVU28
 176 0020 9A68     		ldr	r2, [r3, #8]
 177 0022 22F48032 		bic	r2, r2, #65536
 178 0026 9A60     		str	r2, [r3, #8]
 279:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE(); 
 179              		.loc 1 279 3 view .LVU29
 180 0028 DA68     		ldr	r2, [r3, #12]
 181 002a 22F48032 		bic	r2, r2, #65536
 182 002e DA60     		str	r2, [r3, #12]
 280:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** 
 281:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   /* Configure interrupt mode */
ARM GAS  /var/folders/3_/bwhprqbs4159v4wd5z0pb2nr0000gn/T//ccMILYZK.s 			page 9


 282:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 183              		.loc 1 282 3 view .LVU30
 184              		.loc 1 282 17 is_stmt 0 view .LVU31
 185 0030 4368     		ldr	r3, [r0, #4]
 186              		.loc 1 282 5 view .LVU32
 187 0032 13F4803F 		tst	r3, #65536
 188 0036 04D0     		beq	.L13
 283:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   {
 284:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****     __HAL_PWR_PVD_EXTI_ENABLE_IT();
 189              		.loc 1 284 5 is_stmt 1 view .LVU33
 190 0038 114A     		ldr	r2, .L17+4
 191 003a 1368     		ldr	r3, [r2]
 192 003c 43F48033 		orr	r3, r3, #65536
 193 0040 1360     		str	r3, [r2]
 194              	.L13:
 285:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   }
 286:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   
 287:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   /* Configure event mode */
 288:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 195              		.loc 1 288 3 view .LVU34
 196              		.loc 1 288 17 is_stmt 0 view .LVU35
 197 0042 4368     		ldr	r3, [r0, #4]
 198              		.loc 1 288 5 view .LVU36
 199 0044 13F4003F 		tst	r3, #131072
 200 0048 04D0     		beq	.L14
 289:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   {
 290:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****     __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 201              		.loc 1 290 5 is_stmt 1 view .LVU37
 202 004a 0D4A     		ldr	r2, .L17+4
 203 004c 5368     		ldr	r3, [r2, #4]
 204 004e 43F48033 		orr	r3, r3, #65536
 205 0052 5360     		str	r3, [r2, #4]
 206              	.L14:
 291:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   }
 292:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   
 293:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   /* Configure the edge */
 294:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 207              		.loc 1 294 3 view .LVU38
 208              		.loc 1 294 17 is_stmt 0 view .LVU39
 209 0054 4368     		ldr	r3, [r0, #4]
 210              		.loc 1 294 5 view .LVU40
 211 0056 13F0010F 		tst	r3, #1
 212 005a 04D0     		beq	.L15
 295:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   {
 296:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****     __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 213              		.loc 1 296 5 is_stmt 1 view .LVU41
 214 005c 084A     		ldr	r2, .L17+4
 215 005e 9368     		ldr	r3, [r2, #8]
 216 0060 43F48033 		orr	r3, r3, #65536
 217 0064 9360     		str	r3, [r2, #8]
 218              	.L15:
 297:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   }
 298:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   
 299:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 219              		.loc 1 299 3 view .LVU42
 220              		.loc 1 299 17 is_stmt 0 view .LVU43
 221 0066 4368     		ldr	r3, [r0, #4]
ARM GAS  /var/folders/3_/bwhprqbs4159v4wd5z0pb2nr0000gn/T//ccMILYZK.s 			page 10


 222              		.loc 1 299 5 view .LVU44
 223 0068 13F0020F 		tst	r3, #2
 224 006c 04D0     		beq	.L12
 300:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   {
 301:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****     __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 225              		.loc 1 301 5 is_stmt 1 view .LVU45
 226 006e 044A     		ldr	r2, .L17+4
 227 0070 D368     		ldr	r3, [r2, #12]
 228 0072 43F48033 		orr	r3, r3, #65536
 229 0076 D360     		str	r3, [r2, #12]
 230              	.L12:
 302:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   }
 303:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** }
 231              		.loc 1 303 1 is_stmt 0 view .LVU46
 232 0078 7047     		bx	lr
 233              	.L18:
 234 007a 00BF     		.align	2
 235              	.L17:
 236 007c 00700040 		.word	1073770496
 237 0080 003C0140 		.word	1073822720
 238              		.cfi_endproc
 239              	.LFE133:
 241              		.section	.text.HAL_PWR_EnablePVD,"ax",%progbits
 242              		.align	1
 243              		.global	HAL_PWR_EnablePVD
 244              		.syntax unified
 245              		.thumb
 246              		.thumb_func
 248              	HAL_PWR_EnablePVD:
 249              	.LFB134:
 304:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** 
 305:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** /**
 306:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @brief Enables the Power Voltage Detector(PVD).
 307:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @retval None
 308:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   */
 309:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** void HAL_PWR_EnablePVD(void)
 310:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** {
 250              		.loc 1 310 1 is_stmt 1 view -0
 251              		.cfi_startproc
 252              		@ args = 0, pretend = 0, frame = 0
 253              		@ frame_needed = 0, uses_anonymous_args = 0
 254              		@ link register save eliminated.
 311:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)ENABLE;
 255              		.loc 1 311 3 view .LVU48
 256              		.loc 1 311 33 is_stmt 0 view .LVU49
 257 0000 014B     		ldr	r3, .L20
 258 0002 0122     		movs	r2, #1
 259 0004 1A61     		str	r2, [r3, #16]
 312:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** }
 260              		.loc 1 312 1 view .LVU50
 261 0006 7047     		bx	lr
 262              	.L21:
 263              		.align	2
 264              	.L20:
 265 0008 00000E42 		.word	1108213760
 266              		.cfi_endproc
 267              	.LFE134:
ARM GAS  /var/folders/3_/bwhprqbs4159v4wd5z0pb2nr0000gn/T//ccMILYZK.s 			page 11


 269              		.section	.text.HAL_PWR_DisablePVD,"ax",%progbits
 270              		.align	1
 271              		.global	HAL_PWR_DisablePVD
 272              		.syntax unified
 273              		.thumb
 274              		.thumb_func
 276              	HAL_PWR_DisablePVD:
 277              	.LFB135:
 313:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** 
 314:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** /**
 315:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @brief Disables the Power Voltage Detector(PVD).
 316:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @retval None
 317:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   */
 318:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** void HAL_PWR_DisablePVD(void)
 319:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** {
 278              		.loc 1 319 1 is_stmt 1 view -0
 279              		.cfi_startproc
 280              		@ args = 0, pretend = 0, frame = 0
 281              		@ frame_needed = 0, uses_anonymous_args = 0
 282              		@ link register save eliminated.
 320:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *(__IO uint32_t *) CR_PVDE_BB = (uint32_t)DISABLE;
 283              		.loc 1 320 3 view .LVU52
 284              		.loc 1 320 33 is_stmt 0 view .LVU53
 285 0000 014B     		ldr	r3, .L23
 286 0002 0022     		movs	r2, #0
 287 0004 1A61     		str	r2, [r3, #16]
 321:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** }
 288              		.loc 1 321 1 view .LVU54
 289 0006 7047     		bx	lr
 290              	.L24:
 291              		.align	2
 292              	.L23:
 293 0008 00000E42 		.word	1108213760
 294              		.cfi_endproc
 295              	.LFE135:
 297              		.section	.text.HAL_PWR_EnableWakeUpPin,"ax",%progbits
 298              		.align	1
 299              		.global	HAL_PWR_EnableWakeUpPin
 300              		.syntax unified
 301              		.thumb
 302              		.thumb_func
 304              	HAL_PWR_EnableWakeUpPin:
 305              	.LVL1:
 306              	.LFB136:
 322:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** 
 323:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** /**
 324:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @brief Enables the Wake-up PINx functionality.
 325:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @param WakeUpPinx Specifies the Power Wake-Up pin to enable.
 326:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *         This parameter can be one of the following values:
 327:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *           @arg PWR_WAKEUP_PIN1
 328:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413x
 329:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423x
 330:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @retval None
 331:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   */
 332:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinx)
 333:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** {
 307              		.loc 1 333 1 is_stmt 1 view -0
ARM GAS  /var/folders/3_/bwhprqbs4159v4wd5z0pb2nr0000gn/T//ccMILYZK.s 			page 12


 308              		.cfi_startproc
 309              		@ args = 0, pretend = 0, frame = 0
 310              		@ frame_needed = 0, uses_anonymous_args = 0
 311              		@ link register save eliminated.
 334:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   /* Check the parameter */
 335:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));
 312              		.loc 1 335 3 view .LVU56
 336:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** 
 337:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   /* Enable the wake up pin */
 338:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   SET_BIT(PWR->CSR, WakeUpPinx);
 313              		.loc 1 338 3 view .LVU57
 314 0000 024A     		ldr	r2, .L26
 315 0002 5368     		ldr	r3, [r2, #4]
 316 0004 0343     		orrs	r3, r3, r0
 317 0006 5360     		str	r3, [r2, #4]
 339:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** }
 318              		.loc 1 339 1 is_stmt 0 view .LVU58
 319 0008 7047     		bx	lr
 320              	.L27:
 321 000a 00BF     		.align	2
 322              	.L26:
 323 000c 00700040 		.word	1073770496
 324              		.cfi_endproc
 325              	.LFE136:
 327              		.section	.text.HAL_PWR_DisableWakeUpPin,"ax",%progbits
 328              		.align	1
 329              		.global	HAL_PWR_DisableWakeUpPin
 330              		.syntax unified
 331              		.thumb
 332              		.thumb_func
 334              	HAL_PWR_DisableWakeUpPin:
 335              	.LVL2:
 336              	.LFB137:
 340:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** 
 341:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** /**
 342:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @brief Disables the Wake-up PINx functionality.
 343:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @param WakeUpPinx Specifies the Power Wake-Up pin to disable.
 344:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *         This parameter can be one of the following values:
 345:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *           @arg PWR_WAKEUP_PIN1
 346:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *           @arg PWR_WAKEUP_PIN2 available only on STM32F410xx/STM32F446xx/STM32F412xx/STM32F413x
 347:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *           @arg PWR_WAKEUP_PIN3 available only on STM32F410xx/STM32F412xx/STM32F413xx/STM32F423x
 348:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @retval None
 349:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   */
 350:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
 351:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** {
 337              		.loc 1 351 1 is_stmt 1 view -0
 338              		.cfi_startproc
 339              		@ args = 0, pretend = 0, frame = 0
 340              		@ frame_needed = 0, uses_anonymous_args = 0
 341              		@ link register save eliminated.
 352:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   /* Check the parameter */
 353:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));  
 342              		.loc 1 353 3 view .LVU60
 354:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** 
 355:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   /* Disable the wake up pin */
 356:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   CLEAR_BIT(PWR->CSR, WakeUpPinx);
 343              		.loc 1 356 3 view .LVU61
ARM GAS  /var/folders/3_/bwhprqbs4159v4wd5z0pb2nr0000gn/T//ccMILYZK.s 			page 13


 344 0000 024A     		ldr	r2, .L29
 345 0002 5368     		ldr	r3, [r2, #4]
 346 0004 23EA0003 		bic	r3, r3, r0
 347 0008 5360     		str	r3, [r2, #4]
 357:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** }
 348              		.loc 1 357 1 is_stmt 0 view .LVU62
 349 000a 7047     		bx	lr
 350              	.L30:
 351              		.align	2
 352              	.L29:
 353 000c 00700040 		.word	1073770496
 354              		.cfi_endproc
 355              	.LFE137:
 357              		.section	.text.HAL_PWR_EnterSLEEPMode,"ax",%progbits
 358              		.align	1
 359              		.global	HAL_PWR_EnterSLEEPMode
 360              		.syntax unified
 361              		.thumb
 362              		.thumb_func
 364              	HAL_PWR_EnterSLEEPMode:
 365              	.LVL3:
 366              	.LFB138:
 358:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   
 359:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** /**
 360:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @brief Enters Sleep mode.
 361:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *   
 362:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @note In Sleep mode, all I/O pins keep the same state as in Run mode.
 363:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * 
 364:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @note In Sleep mode, the systick is stopped to avoid exit from this mode with
 365:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *       systick interrupt when used as time base for Timeout 
 366:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *                
 367:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @param Regulator Specifies the regulator state in SLEEP mode.
 368:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *            This parameter can be one of the following values:
 369:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *            @arg PWR_MAINREGULATOR_ON: SLEEP mode with regulator ON
 370:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *            @arg PWR_LOWPOWERREGULATOR_ON: SLEEP mode with low power regulator ON
 371:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @note This parameter is not used for the STM32F4 family and is kept as parameter
 372:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *       just to maintain compatibility with the lower power families.
 373:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @param SLEEPEntry Specifies if SLEEP mode in entered with WFI or WFE instruction.
 374:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *          This parameter can be one of the following values:
 375:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
 376:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
 377:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @retval None
 378:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   */
 379:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
 380:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** {
 367              		.loc 1 380 1 is_stmt 1 view -0
 368              		.cfi_startproc
 369              		@ args = 0, pretend = 0, frame = 0
 370              		@ frame_needed = 0, uses_anonymous_args = 0
 371              		@ link register save eliminated.
 381:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   /* Check the parameters */
 382:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   assert_param(IS_PWR_REGULATOR(Regulator));
 372              		.loc 1 382 3 view .LVU64
 383:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));
 373              		.loc 1 383 3 view .LVU65
 384:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** 
 385:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   /* Clear SLEEPDEEP bit of Cortex System Control Register */
ARM GAS  /var/folders/3_/bwhprqbs4159v4wd5z0pb2nr0000gn/T//ccMILYZK.s 			page 14


 386:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 374              		.loc 1 386 3 view .LVU66
 375 0000 064A     		ldr	r2, .L35
 376 0002 1369     		ldr	r3, [r2, #16]
 377 0004 23F00403 		bic	r3, r3, #4
 378 0008 1361     		str	r3, [r2, #16]
 387:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** 
 388:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   /* Select SLEEP mode entry -------------------------------------------------*/
 389:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 379              		.loc 1 389 3 view .LVU67
 380              		.loc 1 389 5 is_stmt 0 view .LVU68
 381 000a 0129     		cmp	r1, #1
 382 000c 03D0     		beq	.L34
 390:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   {   
 391:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****     /* Request Wait For Interrupt */
 392:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****     __WFI();
 393:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   }
 394:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   else
 395:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   {
 396:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****     /* Request Wait For Event */
 397:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****     __SEV();
 383              		.loc 1 397 5 is_stmt 1 view .LVU69
 384              		.syntax unified
 385              	@ 397 "stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c" 1
 386 000e 40BF     		sev
 387              	@ 0 "" 2
 398:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****     __WFE();
 388              		.loc 1 398 5 view .LVU70
 389              	@ 398 "stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c" 1
 390 0010 20BF     		wfe
 391              	@ 0 "" 2
 399:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****     __WFE();
 392              		.loc 1 399 5 view .LVU71
 393              	@ 399 "stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c" 1
 394 0012 20BF     		wfe
 395              	@ 0 "" 2
 400:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   }
 401:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** }
 396              		.loc 1 401 1 is_stmt 0 view .LVU72
 397              		.thumb
 398              		.syntax unified
 399 0014 7047     		bx	lr
 400              	.L34:
 392:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   }
 401              		.loc 1 392 5 is_stmt 1 view .LVU73
 402              		.syntax unified
 403              	@ 392 "stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c" 1
 404 0016 30BF     		wfi
 405              	@ 0 "" 2
 406              		.thumb
 407              		.syntax unified
 408 0018 7047     		bx	lr
 409              	.L36:
 410 001a 00BF     		.align	2
 411              	.L35:
 412 001c 00ED00E0 		.word	-536810240
 413              		.cfi_endproc
ARM GAS  /var/folders/3_/bwhprqbs4159v4wd5z0pb2nr0000gn/T//ccMILYZK.s 			page 15


 414              	.LFE138:
 416              		.section	.text.HAL_PWR_EnterSTOPMode,"ax",%progbits
 417              		.align	1
 418              		.global	HAL_PWR_EnterSTOPMode
 419              		.syntax unified
 420              		.thumb
 421              		.thumb_func
 423              	HAL_PWR_EnterSTOPMode:
 424              	.LVL4:
 425              	.LFB139:
 402:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** 
 403:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** /**
 404:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @brief Enters Stop mode. 
 405:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @note In Stop mode, all I/O pins keep the same state as in Run mode.
 406:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @note When exiting Stop mode by issuing an interrupt or a wake-up event, 
 407:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *         the HSI RC oscillator is selected as system clock.
 408:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @note When the voltage regulator operates in low power mode, an additional 
 409:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *         startup delay is incurred when waking up from Stop mode. 
 410:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *         By keeping the internal regulator ON during Stop mode, the consumption 
 411:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *         is higher although the startup time is reduced.    
 412:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @param Regulator Specifies the regulator state in Stop mode.
 413:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *          This parameter can be one of the following values:
 414:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *            @arg PWR_MAINREGULATOR_ON: Stop mode with regulator ON
 415:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *            @arg PWR_LOWPOWERREGULATOR_ON: Stop mode with low power regulator ON
 416:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @param STOPEntry Specifies if Stop mode in entered with WFI or WFE instruction.
 417:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *          This parameter can be one of the following values:
 418:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
 419:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction
 420:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @retval None
 421:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   */
 422:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
 423:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** {
 426              		.loc 1 423 1 view -0
 427              		.cfi_startproc
 428              		@ args = 0, pretend = 0, frame = 0
 429              		@ frame_needed = 0, uses_anonymous_args = 0
 430              		@ link register save eliminated.
 424:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   /* Check the parameters */
 425:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   assert_param(IS_PWR_REGULATOR(Regulator));
 431              		.loc 1 425 3 view .LVU75
 426:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   assert_param(IS_PWR_STOP_ENTRY(STOPEntry));
 432              		.loc 1 426 3 view .LVU76
 427:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   
 428:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   /* Select the regulator state in Stop mode: Set PDDS and LPDS bits according to PWR_Regulator val
 429:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   MODIFY_REG(PWR->CR, (PWR_CR_PDDS | PWR_CR_LPDS), Regulator);
 433              		.loc 1 429 3 view .LVU77
 434 0000 0B4A     		ldr	r2, .L41
 435 0002 1368     		ldr	r3, [r2]
 436 0004 23F00303 		bic	r3, r3, #3
 437 0008 0343     		orrs	r3, r3, r0
 438 000a 1360     		str	r3, [r2]
 430:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   
 431:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   /* Set SLEEPDEEP bit of Cortex System Control Register */
 432:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 439              		.loc 1 432 3 view .LVU78
 440 000c 094A     		ldr	r2, .L41+4
 441 000e 1369     		ldr	r3, [r2, #16]
ARM GAS  /var/folders/3_/bwhprqbs4159v4wd5z0pb2nr0000gn/T//ccMILYZK.s 			page 16


 442 0010 43F00403 		orr	r3, r3, #4
 443 0014 1361     		str	r3, [r2, #16]
 433:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   
 434:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   /* Select Stop mode entry --------------------------------------------------*/
 435:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   if(STOPEntry == PWR_STOPENTRY_WFI)
 444              		.loc 1 435 3 view .LVU79
 445              		.loc 1 435 5 is_stmt 0 view .LVU80
 446 0016 0129     		cmp	r1, #1
 447 0018 08D0     		beq	.L40
 436:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   {   
 437:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****     /* Request Wait For Interrupt */
 438:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****     __WFI();
 439:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   }
 440:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   else
 441:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   {
 442:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****     /* Request Wait For Event */
 443:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****     __SEV();
 448              		.loc 1 443 5 is_stmt 1 view .LVU81
 449              		.syntax unified
 450              	@ 443 "stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c" 1
 451 001a 40BF     		sev
 452              	@ 0 "" 2
 444:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****     __WFE();
 453              		.loc 1 444 5 view .LVU82
 454              	@ 444 "stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c" 1
 455 001c 20BF     		wfe
 456              	@ 0 "" 2
 445:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****     __WFE();
 457              		.loc 1 445 5 view .LVU83
 458              	@ 445 "stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c" 1
 459 001e 20BF     		wfe
 460              	@ 0 "" 2
 461              		.thumb
 462              		.syntax unified
 463              	.L39:
 446:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   }
 447:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   /* Reset SLEEPDEEP bit of Cortex System Control Register */
 448:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));  
 464              		.loc 1 448 3 view .LVU84
 465 0020 044A     		ldr	r2, .L41+4
 466 0022 1369     		ldr	r3, [r2, #16]
 467 0024 23F00403 		bic	r3, r3, #4
 468 0028 1361     		str	r3, [r2, #16]
 449:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** }
 469              		.loc 1 449 1 is_stmt 0 view .LVU85
 470 002a 7047     		bx	lr
 471              	.L40:
 438:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   }
 472              		.loc 1 438 5 is_stmt 1 view .LVU86
 473              		.syntax unified
 474              	@ 438 "stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c" 1
 475 002c 30BF     		wfi
 476              	@ 0 "" 2
 477              		.thumb
 478              		.syntax unified
 479 002e F7E7     		b	.L39
 480              	.L42:
ARM GAS  /var/folders/3_/bwhprqbs4159v4wd5z0pb2nr0000gn/T//ccMILYZK.s 			page 17


 481              		.align	2
 482              	.L41:
 483 0030 00700040 		.word	1073770496
 484 0034 00ED00E0 		.word	-536810240
 485              		.cfi_endproc
 486              	.LFE139:
 488              		.section	.text.HAL_PWR_EnterSTANDBYMode,"ax",%progbits
 489              		.align	1
 490              		.global	HAL_PWR_EnterSTANDBYMode
 491              		.syntax unified
 492              		.thumb
 493              		.thumb_func
 495              	HAL_PWR_EnterSTANDBYMode:
 496              	.LFB140:
 450:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** 
 451:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** /**
 452:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @brief Enters Standby mode.
 453:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @note In Standby mode, all I/O pins are high impedance except for:
 454:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *          - Reset pad (still available) 
 455:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *          - RTC_AF1 pin (PC13) if configured for tamper, time-stamp, RTC 
 456:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *            Alarm out, or RTC clock calibration out.
 457:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *          - RTC_AF2 pin (PI8) if configured for tamper or time-stamp.  
 458:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *          - WKUP pin 1 (PA0) if enabled.       
 459:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @retval None
 460:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   */
 461:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** void HAL_PWR_EnterSTANDBYMode(void)
 462:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** {
 497              		.loc 1 462 1 view -0
 498              		.cfi_startproc
 499              		@ args = 0, pretend = 0, frame = 0
 500              		@ frame_needed = 0, uses_anonymous_args = 0
 501              		@ link register save eliminated.
 463:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   /* Select Standby mode */
 464:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   SET_BIT(PWR->CR, PWR_CR_PDDS);
 502              		.loc 1 464 3 view .LVU88
 503 0000 054A     		ldr	r2, .L44
 504 0002 1368     		ldr	r3, [r2]
 505 0004 43F00203 		orr	r3, r3, #2
 506 0008 1360     		str	r3, [r2]
 465:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** 
 466:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   /* Set SLEEPDEEP bit of Cortex System Control Register */
 467:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 507              		.loc 1 467 3 view .LVU89
 508 000a 044A     		ldr	r2, .L44+4
 509 000c 1369     		ldr	r3, [r2, #16]
 510 000e 43F00403 		orr	r3, r3, #4
 511 0012 1361     		str	r3, [r2, #16]
 468:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   
 469:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   /* This option is used to ensure that store operations are completed */
 470:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** #if defined ( __CC_ARM)
 471:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   __force_stores();
 472:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** #endif
 473:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   /* Request Wait For Interrupt */
 474:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   __WFI();
 512              		.loc 1 474 3 view .LVU90
 513              		.syntax unified
 514              	@ 474 "stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c" 1
ARM GAS  /var/folders/3_/bwhprqbs4159v4wd5z0pb2nr0000gn/T//ccMILYZK.s 			page 18


 515 0014 30BF     		wfi
 516              	@ 0 "" 2
 475:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** }
 517              		.loc 1 475 1 is_stmt 0 view .LVU91
 518              		.thumb
 519              		.syntax unified
 520 0016 7047     		bx	lr
 521              	.L45:
 522              		.align	2
 523              	.L44:
 524 0018 00700040 		.word	1073770496
 525 001c 00ED00E0 		.word	-536810240
 526              		.cfi_endproc
 527              	.LFE140:
 529              		.section	.text.HAL_PWR_PVDCallback,"ax",%progbits
 530              		.align	1
 531              		.weak	HAL_PWR_PVDCallback
 532              		.syntax unified
 533              		.thumb
 534              		.thumb_func
 536              	HAL_PWR_PVDCallback:
 537              	.LFB142:
 476:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** 
 477:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** /**
 478:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @brief This function handles the PWR PVD interrupt request.
 479:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @note This API should be called under the PVD_IRQHandler().
 480:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @retval None
 481:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   */
 482:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** void HAL_PWR_PVD_IRQHandler(void)
 483:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** {
 484:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   /* Check PWR Exti flag */
 485:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 486:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   {
 487:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****     /* PWR PVD interrupt user callback */
 488:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****     HAL_PWR_PVDCallback();
 489:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****     
 490:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****     /* Clear PWR Exti pending bit */
 491:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****     __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 492:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   }
 493:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** }
 494:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** 
 495:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** /**
 496:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @brief  PWR PVD interrupt callback
 497:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @retval None
 498:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   */
 499:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** __weak void HAL_PWR_PVDCallback(void)
 500:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** {
 538              		.loc 1 500 1 is_stmt 1 view -0
 539              		.cfi_startproc
 540              		@ args = 0, pretend = 0, frame = 0
 541              		@ frame_needed = 0, uses_anonymous_args = 0
 542              		@ link register save eliminated.
 501:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   /* NOTE : This function Should not be modified, when the callback is needed,
 502:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****             the HAL_PWR_PVDCallback could be implemented in the user file
 503:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****    */ 
 504:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** }
 543              		.loc 1 504 1 view .LVU93
ARM GAS  /var/folders/3_/bwhprqbs4159v4wd5z0pb2nr0000gn/T//ccMILYZK.s 			page 19


 544 0000 7047     		bx	lr
 545              		.cfi_endproc
 546              	.LFE142:
 548              		.section	.text.HAL_PWR_PVD_IRQHandler,"ax",%progbits
 549              		.align	1
 550              		.global	HAL_PWR_PVD_IRQHandler
 551              		.syntax unified
 552              		.thumb
 553              		.thumb_func
 555              	HAL_PWR_PVD_IRQHandler:
 556              	.LFB141:
 483:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   /* Check PWR Exti flag */
 557              		.loc 1 483 1 view -0
 558              		.cfi_startproc
 559              		@ args = 0, pretend = 0, frame = 0
 560              		@ frame_needed = 0, uses_anonymous_args = 0
 561 0000 08B5     		push	{r3, lr}
 562              	.LCFI4:
 563              		.cfi_def_cfa_offset 8
 564              		.cfi_offset 3, -8
 565              		.cfi_offset 14, -4
 485:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   {
 566              		.loc 1 485 3 view .LVU95
 485:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   {
 567              		.loc 1 485 6 is_stmt 0 view .LVU96
 568 0002 064B     		ldr	r3, .L51
 569 0004 5B69     		ldr	r3, [r3, #20]
 485:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   {
 570              		.loc 1 485 5 view .LVU97
 571 0006 13F4803F 		tst	r3, #65536
 572 000a 00D1     		bne	.L50
 573              	.L47:
 493:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** 
 574              		.loc 1 493 1 view .LVU98
 575 000c 08BD     		pop	{r3, pc}
 576              	.L50:
 488:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****     
 577              		.loc 1 488 5 is_stmt 1 view .LVU99
 578 000e FFF7FEFF 		bl	HAL_PWR_PVDCallback
 579              	.LVL5:
 491:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   }
 580              		.loc 1 491 5 view .LVU100
 581 0012 024B     		ldr	r3, .L51
 582 0014 4FF48032 		mov	r2, #65536
 583 0018 5A61     		str	r2, [r3, #20]
 493:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** 
 584              		.loc 1 493 1 is_stmt 0 view .LVU101
 585 001a F7E7     		b	.L47
 586              	.L52:
 587              		.align	2
 588              	.L51:
 589 001c 003C0140 		.word	1073822720
 590              		.cfi_endproc
 591              	.LFE141:
 593              		.section	.text.HAL_PWR_EnableSleepOnExit,"ax",%progbits
 594              		.align	1
 595              		.global	HAL_PWR_EnableSleepOnExit
ARM GAS  /var/folders/3_/bwhprqbs4159v4wd5z0pb2nr0000gn/T//ccMILYZK.s 			page 20


 596              		.syntax unified
 597              		.thumb
 598              		.thumb_func
 600              	HAL_PWR_EnableSleepOnExit:
 601              	.LFB143:
 505:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** 
 506:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** /**
 507:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @brief Indicates Sleep-On-Exit when returning from Handler mode to Thread mode. 
 508:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @note Set SLEEPONEXIT bit of SCR register. When this bit is set, the processor 
 509:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *       re-enters SLEEP mode when an interruption handling is over.
 510:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *       Setting this bit is useful when the processor is expected to run only on
 511:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *       interruptions handling.         
 512:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @retval None
 513:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   */
 514:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** void HAL_PWR_EnableSleepOnExit(void)
 515:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** {
 602              		.loc 1 515 1 is_stmt 1 view -0
 603              		.cfi_startproc
 604              		@ args = 0, pretend = 0, frame = 0
 605              		@ frame_needed = 0, uses_anonymous_args = 0
 606              		@ link register save eliminated.
 516:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   /* Set SLEEPONEXIT bit of Cortex System Control Register */
 517:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 607              		.loc 1 517 3 view .LVU103
 608 0000 024A     		ldr	r2, .L54
 609 0002 1369     		ldr	r3, [r2, #16]
 610 0004 43F00203 		orr	r3, r3, #2
 611 0008 1361     		str	r3, [r2, #16]
 518:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** }
 612              		.loc 1 518 1 is_stmt 0 view .LVU104
 613 000a 7047     		bx	lr
 614              	.L55:
 615              		.align	2
 616              	.L54:
 617 000c 00ED00E0 		.word	-536810240
 618              		.cfi_endproc
 619              	.LFE143:
 621              		.section	.text.HAL_PWR_DisableSleepOnExit,"ax",%progbits
 622              		.align	1
 623              		.global	HAL_PWR_DisableSleepOnExit
 624              		.syntax unified
 625              		.thumb
 626              		.thumb_func
 628              	HAL_PWR_DisableSleepOnExit:
 629              	.LFB144:
 519:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** 
 520:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** /**
 521:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @brief Disables Sleep-On-Exit feature when returning from Handler mode to Thread mode. 
 522:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @note Clears SLEEPONEXIT bit of SCR register. When this bit is set, the processor 
 523:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *       re-enters SLEEP mode when an interruption handling is over.          
 524:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @retval None
 525:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   */
 526:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** void HAL_PWR_DisableSleepOnExit(void)
 527:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** {
 630              		.loc 1 527 1 is_stmt 1 view -0
 631              		.cfi_startproc
 632              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /var/folders/3_/bwhprqbs4159v4wd5z0pb2nr0000gn/T//ccMILYZK.s 			page 21


 633              		@ frame_needed = 0, uses_anonymous_args = 0
 634              		@ link register save eliminated.
 528:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   /* Clear SLEEPONEXIT bit of Cortex System Control Register */
 529:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 635              		.loc 1 529 3 view .LVU106
 636 0000 024A     		ldr	r2, .L57
 637 0002 1369     		ldr	r3, [r2, #16]
 638 0004 23F00203 		bic	r3, r3, #2
 639 0008 1361     		str	r3, [r2, #16]
 530:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** }
 640              		.loc 1 530 1 is_stmt 0 view .LVU107
 641 000a 7047     		bx	lr
 642              	.L58:
 643              		.align	2
 644              	.L57:
 645 000c 00ED00E0 		.word	-536810240
 646              		.cfi_endproc
 647              	.LFE144:
 649              		.section	.text.HAL_PWR_EnableSEVOnPend,"ax",%progbits
 650              		.align	1
 651              		.global	HAL_PWR_EnableSEVOnPend
 652              		.syntax unified
 653              		.thumb
 654              		.thumb_func
 656              	HAL_PWR_EnableSEVOnPend:
 657              	.LFB145:
 531:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** 
 532:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** /**
 533:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @brief Enables CORTEX M4 SEVONPEND bit. 
 534:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @note Sets SEVONPEND bit of SCR register. When this bit is set, this causes 
 535:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *       WFE to wake up when an interrupt moves from inactive to pended.
 536:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @retval None
 537:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   */
 538:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** void HAL_PWR_EnableSEVOnPend(void)
 539:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** {
 658              		.loc 1 539 1 is_stmt 1 view -0
 659              		.cfi_startproc
 660              		@ args = 0, pretend = 0, frame = 0
 661              		@ frame_needed = 0, uses_anonymous_args = 0
 662              		@ link register save eliminated.
 540:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   /* Set SEVONPEND bit of Cortex System Control Register */
 541:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
 663              		.loc 1 541 3 view .LVU109
 664 0000 024A     		ldr	r2, .L60
 665 0002 1369     		ldr	r3, [r2, #16]
 666 0004 43F01003 		orr	r3, r3, #16
 667 0008 1361     		str	r3, [r2, #16]
 542:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** }
 668              		.loc 1 542 1 is_stmt 0 view .LVU110
 669 000a 7047     		bx	lr
 670              	.L61:
 671              		.align	2
 672              	.L60:
 673 000c 00ED00E0 		.word	-536810240
 674              		.cfi_endproc
 675              	.LFE145:
 677              		.section	.text.HAL_PWR_DisableSEVOnPend,"ax",%progbits
ARM GAS  /var/folders/3_/bwhprqbs4159v4wd5z0pb2nr0000gn/T//ccMILYZK.s 			page 22


 678              		.align	1
 679              		.global	HAL_PWR_DisableSEVOnPend
 680              		.syntax unified
 681              		.thumb
 682              		.thumb_func
 684              	HAL_PWR_DisableSEVOnPend:
 685              	.LFB146:
 543:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** 
 544:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** /**
 545:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @brief Disables CORTEX M4 SEVONPEND bit. 
 546:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @note Clears SEVONPEND bit of SCR register. When this bit is set, this causes 
 547:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   *       WFE to wake up when an interrupt moves from inactive to pended.         
 548:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   * @retval None
 549:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   */
 550:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** void HAL_PWR_DisableSEVOnPend(void)
 551:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** {
 686              		.loc 1 551 1 is_stmt 1 view -0
 687              		.cfi_startproc
 688              		@ args = 0, pretend = 0, frame = 0
 689              		@ frame_needed = 0, uses_anonymous_args = 0
 690              		@ link register save eliminated.
 552:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   /* Clear SEVONPEND bit of Cortex System Control Register */
 553:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c ****   CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SEVONPEND_Msk));
 691              		.loc 1 553 3 view .LVU112
 692 0000 024A     		ldr	r2, .L63
 693 0002 1369     		ldr	r3, [r2, #16]
 694 0004 23F01003 		bic	r3, r3, #16
 695 0008 1361     		str	r3, [r2, #16]
 554:stm32/Drivers/STM32F4xx_HAL_Driver/Src/stm32f4xx_hal_pwr.c **** }
 696              		.loc 1 554 1 is_stmt 0 view .LVU113
 697 000a 7047     		bx	lr
 698              	.L64:
 699              		.align	2
 700              	.L63:
 701 000c 00ED00E0 		.word	-536810240
 702              		.cfi_endproc
 703              	.LFE146:
 705              		.text
 706              	.Letext0:
 707              		.file 2 "/Applications/ARM/arm-none-eabi/include/machine/_default_types.h"
 708              		.file 3 "/Applications/ARM/arm-none-eabi/include/sys/_stdint.h"
 709              		.file 4 "stm32/Drivers/CMSIS/Include/core_cm4.h"
 710              		.file 5 "stm32/Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f401xc.h"
 711              		.file 6 "stm32/Drivers/CMSIS/Device/ST/STM32F4xx/Include/stm32f4xx.h"
 712              		.file 7 "stm32/Drivers/STM32F4xx_HAL_Driver/Inc/stm32f4xx_hal_pwr.h"
ARM GAS  /var/folders/3_/bwhprqbs4159v4wd5z0pb2nr0000gn/T//ccMILYZK.s 			page 23


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_hal_pwr.c
/var/folders/3_/bwhprqbs4159v4wd5z0pb2nr0000gn/T//ccMILYZK.s:20     .text.HAL_PWR_DeInit:0000000000000000 $t
/var/folders/3_/bwhprqbs4159v4wd5z0pb2nr0000gn/T//ccMILYZK.s:26     .text.HAL_PWR_DeInit:0000000000000000 HAL_PWR_DeInit
/var/folders/3_/bwhprqbs4159v4wd5z0pb2nr0000gn/T//ccMILYZK.s:48     .text.HAL_PWR_DeInit:0000000000000014 $d
/var/folders/3_/bwhprqbs4159v4wd5z0pb2nr0000gn/T//ccMILYZK.s:53     .text.HAL_PWR_EnableBkUpAccess:0000000000000000 $t
/var/folders/3_/bwhprqbs4159v4wd5z0pb2nr0000gn/T//ccMILYZK.s:59     .text.HAL_PWR_EnableBkUpAccess:0000000000000000 HAL_PWR_EnableBkUpAccess
/var/folders/3_/bwhprqbs4159v4wd5z0pb2nr0000gn/T//ccMILYZK.s:92     .text.HAL_PWR_EnableBkUpAccess:0000000000000014 $d
/var/folders/3_/bwhprqbs4159v4wd5z0pb2nr0000gn/T//ccMILYZK.s:98     .text.HAL_PWR_DisableBkUpAccess:0000000000000000 $t
/var/folders/3_/bwhprqbs4159v4wd5z0pb2nr0000gn/T//ccMILYZK.s:104    .text.HAL_PWR_DisableBkUpAccess:0000000000000000 HAL_PWR_DisableBkUpAccess
/var/folders/3_/bwhprqbs4159v4wd5z0pb2nr0000gn/T//ccMILYZK.s:137    .text.HAL_PWR_DisableBkUpAccess:0000000000000014 $d
/var/folders/3_/bwhprqbs4159v4wd5z0pb2nr0000gn/T//ccMILYZK.s:143    .text.HAL_PWR_ConfigPVD:0000000000000000 $t
/var/folders/3_/bwhprqbs4159v4wd5z0pb2nr0000gn/T//ccMILYZK.s:149    .text.HAL_PWR_ConfigPVD:0000000000000000 HAL_PWR_ConfigPVD
/var/folders/3_/bwhprqbs4159v4wd5z0pb2nr0000gn/T//ccMILYZK.s:236    .text.HAL_PWR_ConfigPVD:000000000000007c $d
/var/folders/3_/bwhprqbs4159v4wd5z0pb2nr0000gn/T//ccMILYZK.s:242    .text.HAL_PWR_EnablePVD:0000000000000000 $t
/var/folders/3_/bwhprqbs4159v4wd5z0pb2nr0000gn/T//ccMILYZK.s:248    .text.HAL_PWR_EnablePVD:0000000000000000 HAL_PWR_EnablePVD
/var/folders/3_/bwhprqbs4159v4wd5z0pb2nr0000gn/T//ccMILYZK.s:265    .text.HAL_PWR_EnablePVD:0000000000000008 $d
/var/folders/3_/bwhprqbs4159v4wd5z0pb2nr0000gn/T//ccMILYZK.s:270    .text.HAL_PWR_DisablePVD:0000000000000000 $t
/var/folders/3_/bwhprqbs4159v4wd5z0pb2nr0000gn/T//ccMILYZK.s:276    .text.HAL_PWR_DisablePVD:0000000000000000 HAL_PWR_DisablePVD
/var/folders/3_/bwhprqbs4159v4wd5z0pb2nr0000gn/T//ccMILYZK.s:293    .text.HAL_PWR_DisablePVD:0000000000000008 $d
/var/folders/3_/bwhprqbs4159v4wd5z0pb2nr0000gn/T//ccMILYZK.s:298    .text.HAL_PWR_EnableWakeUpPin:0000000000000000 $t
/var/folders/3_/bwhprqbs4159v4wd5z0pb2nr0000gn/T//ccMILYZK.s:304    .text.HAL_PWR_EnableWakeUpPin:0000000000000000 HAL_PWR_EnableWakeUpPin
/var/folders/3_/bwhprqbs4159v4wd5z0pb2nr0000gn/T//ccMILYZK.s:323    .text.HAL_PWR_EnableWakeUpPin:000000000000000c $d
/var/folders/3_/bwhprqbs4159v4wd5z0pb2nr0000gn/T//ccMILYZK.s:328    .text.HAL_PWR_DisableWakeUpPin:0000000000000000 $t
/var/folders/3_/bwhprqbs4159v4wd5z0pb2nr0000gn/T//ccMILYZK.s:334    .text.HAL_PWR_DisableWakeUpPin:0000000000000000 HAL_PWR_DisableWakeUpPin
/var/folders/3_/bwhprqbs4159v4wd5z0pb2nr0000gn/T//ccMILYZK.s:353    .text.HAL_PWR_DisableWakeUpPin:000000000000000c $d
/var/folders/3_/bwhprqbs4159v4wd5z0pb2nr0000gn/T//ccMILYZK.s:358    .text.HAL_PWR_EnterSLEEPMode:0000000000000000 $t
/var/folders/3_/bwhprqbs4159v4wd5z0pb2nr0000gn/T//ccMILYZK.s:364    .text.HAL_PWR_EnterSLEEPMode:0000000000000000 HAL_PWR_EnterSLEEPMode
/var/folders/3_/bwhprqbs4159v4wd5z0pb2nr0000gn/T//ccMILYZK.s:412    .text.HAL_PWR_EnterSLEEPMode:000000000000001c $d
/var/folders/3_/bwhprqbs4159v4wd5z0pb2nr0000gn/T//ccMILYZK.s:417    .text.HAL_PWR_EnterSTOPMode:0000000000000000 $t
/var/folders/3_/bwhprqbs4159v4wd5z0pb2nr0000gn/T//ccMILYZK.s:423    .text.HAL_PWR_EnterSTOPMode:0000000000000000 HAL_PWR_EnterSTOPMode
/var/folders/3_/bwhprqbs4159v4wd5z0pb2nr0000gn/T//ccMILYZK.s:483    .text.HAL_PWR_EnterSTOPMode:0000000000000030 $d
/var/folders/3_/bwhprqbs4159v4wd5z0pb2nr0000gn/T//ccMILYZK.s:489    .text.HAL_PWR_EnterSTANDBYMode:0000000000000000 $t
/var/folders/3_/bwhprqbs4159v4wd5z0pb2nr0000gn/T//ccMILYZK.s:495    .text.HAL_PWR_EnterSTANDBYMode:0000000000000000 HAL_PWR_EnterSTANDBYMode
/var/folders/3_/bwhprqbs4159v4wd5z0pb2nr0000gn/T//ccMILYZK.s:524    .text.HAL_PWR_EnterSTANDBYMode:0000000000000018 $d
/var/folders/3_/bwhprqbs4159v4wd5z0pb2nr0000gn/T//ccMILYZK.s:530    .text.HAL_PWR_PVDCallback:0000000000000000 $t
/var/folders/3_/bwhprqbs4159v4wd5z0pb2nr0000gn/T//ccMILYZK.s:536    .text.HAL_PWR_PVDCallback:0000000000000000 HAL_PWR_PVDCallback
/var/folders/3_/bwhprqbs4159v4wd5z0pb2nr0000gn/T//ccMILYZK.s:549    .text.HAL_PWR_PVD_IRQHandler:0000000000000000 $t
/var/folders/3_/bwhprqbs4159v4wd5z0pb2nr0000gn/T//ccMILYZK.s:555    .text.HAL_PWR_PVD_IRQHandler:0000000000000000 HAL_PWR_PVD_IRQHandler
/var/folders/3_/bwhprqbs4159v4wd5z0pb2nr0000gn/T//ccMILYZK.s:589    .text.HAL_PWR_PVD_IRQHandler:000000000000001c $d
/var/folders/3_/bwhprqbs4159v4wd5z0pb2nr0000gn/T//ccMILYZK.s:594    .text.HAL_PWR_EnableSleepOnExit:0000000000000000 $t
/var/folders/3_/bwhprqbs4159v4wd5z0pb2nr0000gn/T//ccMILYZK.s:600    .text.HAL_PWR_EnableSleepOnExit:0000000000000000 HAL_PWR_EnableSleepOnExit
/var/folders/3_/bwhprqbs4159v4wd5z0pb2nr0000gn/T//ccMILYZK.s:617    .text.HAL_PWR_EnableSleepOnExit:000000000000000c $d
/var/folders/3_/bwhprqbs4159v4wd5z0pb2nr0000gn/T//ccMILYZK.s:622    .text.HAL_PWR_DisableSleepOnExit:0000000000000000 $t
/var/folders/3_/bwhprqbs4159v4wd5z0pb2nr0000gn/T//ccMILYZK.s:628    .text.HAL_PWR_DisableSleepOnExit:0000000000000000 HAL_PWR_DisableSleepOnExit
/var/folders/3_/bwhprqbs4159v4wd5z0pb2nr0000gn/T//ccMILYZK.s:645    .text.HAL_PWR_DisableSleepOnExit:000000000000000c $d
/var/folders/3_/bwhprqbs4159v4wd5z0pb2nr0000gn/T//ccMILYZK.s:650    .text.HAL_PWR_EnableSEVOnPend:0000000000000000 $t
/var/folders/3_/bwhprqbs4159v4wd5z0pb2nr0000gn/T//ccMILYZK.s:656    .text.HAL_PWR_EnableSEVOnPend:0000000000000000 HAL_PWR_EnableSEVOnPend
/var/folders/3_/bwhprqbs4159v4wd5z0pb2nr0000gn/T//ccMILYZK.s:673    .text.HAL_PWR_EnableSEVOnPend:000000000000000c $d
/var/folders/3_/bwhprqbs4159v4wd5z0pb2nr0000gn/T//ccMILYZK.s:678    .text.HAL_PWR_DisableSEVOnPend:0000000000000000 $t
/var/folders/3_/bwhprqbs4159v4wd5z0pb2nr0000gn/T//ccMILYZK.s:684    .text.HAL_PWR_DisableSEVOnPend:0000000000000000 HAL_PWR_DisableSEVOnPend
/var/folders/3_/bwhprqbs4159v4wd5z0pb2nr0000gn/T//ccMILYZK.s:701    .text.HAL_PWR_DisableSEVOnPend:000000000000000c $d

NO UNDEFINED SYMBOLS
